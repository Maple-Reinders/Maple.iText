// <auto-generated/>
#if NETSTANDARD2_0

#nullable enable annotations
#nullable disable warnings

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0612, CS0618

namespace iText.Commons.Utils
{
    public partial class ComplexStructureContext
    {
        private global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::iText.Commons.Utils.JsonUtilTest.GrandsonComplexStructure>? _GrandsonComplexStructure;
        
        /// <summary>
        /// Defines the source generated JSON serialization contract metadata for a given type.
        /// </summary>
        #nullable disable annotations // Marking the property type as nullable-oblivious.
        public global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::iText.Commons.Utils.JsonUtilTest.GrandsonComplexStructure> GrandsonComplexStructure
        #nullable enable annotations
        {
            get => _GrandsonComplexStructure ??= (global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::iText.Commons.Utils.JsonUtilTest.GrandsonComplexStructure>)Options.GetTypeInfo(typeof(global::iText.Commons.Utils.JsonUtilTest.GrandsonComplexStructure));
        }
        
        private global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::iText.Commons.Utils.JsonUtilTest.GrandsonComplexStructure> Create_GrandsonComplexStructure(global::System.Text.Json.JsonSerializerOptions options)
        {
            if (!TryGetTypeInfoForRuntimeCustomConverter<global::iText.Commons.Utils.JsonUtilTest.GrandsonComplexStructure>(options, out global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::iText.Commons.Utils.JsonUtilTest.GrandsonComplexStructure> jsonTypeInfo))
            {
                var objectInfo = new global::System.Text.Json.Serialization.Metadata.JsonObjectInfoValues<global::iText.Commons.Utils.JsonUtilTest.GrandsonComplexStructure>
                {
                    ObjectCreator = () => new global::iText.Commons.Utils.JsonUtilTest.GrandsonComplexStructure(),
                    ObjectWithParameterizedConstructorCreator = null,
                    PropertyMetadataInitializer = _ => GrandsonComplexStructurePropInit(options),
                    ConstructorParameterMetadataInitializer = null,
                    ConstructorAttributeProviderFactory = () => typeof(global::iText.Commons.Utils.JsonUtilTest.GrandsonComplexStructure).GetConstructor(InstanceMemberBindingFlags, binder: null, global::System.Array.Empty<global::System.Type>(), modifiers: null),
                    SerializeHandler = GrandsonComplexStructureSerializeHandler,
                };
                
                jsonTypeInfo = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateObjectInfo<global::iText.Commons.Utils.JsonUtilTest.GrandsonComplexStructure>(options, objectInfo);
                jsonTypeInfo.NumberHandling = null;
            }
        
            jsonTypeInfo.OriginatingResolver = this;
            return jsonTypeInfo;
        }

        private static global::System.Text.Json.Serialization.Metadata.JsonPropertyInfo[] GrandsonComplexStructurePropInit(global::System.Text.Json.JsonSerializerOptions options)
        {
            var properties = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfo[2];

            var info0 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<int>
            {
                IsProperty = false,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::iText.Commons.Utils.JsonUtilTest.GrandsonComplexStructure),
                Converter = null,
                Getter = obj => ((global::iText.Commons.Utils.JsonUtilTest.GrandsonComplexStructure)obj).integer,
                Setter = (obj, value) => ((global::iText.Commons.Utils.JsonUtilTest.GrandsonComplexStructure)obj).integer = value!,
                IgnoreCondition = null,
                HasJsonInclude = true,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "integer",
                JsonPropertyName = null,
                AttributeProviderFactory = () => typeof(global::iText.Commons.Utils.JsonUtilTest.GrandsonComplexStructure).GetField("integer", InstanceMemberBindingFlags),
            };
            
            properties[0] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<int>(options, info0);

            var info1 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<string>
            {
                IsProperty = false,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::iText.Commons.Utils.JsonUtilTest.GrandsonComplexStructure),
                Converter = null,
                Getter =  obj => ((global::iText.Commons.Utils.JsonUtilTest.GrandsonComplexStructure)obj).name,
                Setter =  (obj, value) => ((global::iText.Commons.Utils.JsonUtilTest.GrandsonComplexStructure)obj).name = value!,
                IgnoreCondition = null,
                HasJsonInclude = true,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "name",
                JsonPropertyName = null,
                AttributeProviderFactory =  () => typeof(global::iText.Commons.Utils.JsonUtilTest.GrandsonComplexStructure).GetField("name", InstanceMemberBindingFlags),
            };
            
            properties[1] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<string>(options, info1);

            return properties;
        }

        // Intentionally not a static method because we create a delegate to it. Invoking delegates to instance
        // methods is almost as fast as virtual calls. Static methods need to go through a shuffle thunk.
        private void GrandsonComplexStructureSerializeHandler(global::System.Text.Json.Utf8JsonWriter writer, global::iText.Commons.Utils.JsonUtilTest.GrandsonComplexStructure? value)
        {
            if (value is null)
            {
                writer.WriteNullValue();
                return;
            }
            
            writer.WriteStartObject();

            writer.WriteNumber(PropName_integer, ((global::iText.Commons.Utils.JsonUtilTest.GrandsonComplexStructure)value).integer);
            writer.WriteString(PropName_name, ((global::iText.Commons.Utils.JsonUtilTest.GrandsonComplexStructure)value).name);

            writer.WriteEndObject();
        }
    }
}
#endif