// <auto-generated/>
#if NETSTANDARD2_0

#nullable enable annotations
#nullable disable warnings

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0612, CS0618

namespace iText.Commons.Utils
{
    public partial class ComplexStructureContext : global::System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver
    {
        /// <inheritdoc/>
        public override global::System.Text.Json.Serialization.Metadata.JsonTypeInfo? GetTypeInfo(global::System.Type type)
        {
            Options.TryGetTypeInfo(type, out global::System.Text.Json.Serialization.Metadata.JsonTypeInfo? typeInfo);
            return typeInfo;
        }

        global::System.Text.Json.Serialization.Metadata.JsonTypeInfo? global::System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver.GetTypeInfo(global::System.Type type, global::System.Text.Json.JsonSerializerOptions options)
        {
            if (type == typeof(global::iText.Commons.Utils.JsonUtilTest.ChildInComplexStructure))
            {
                return Create_ChildInComplexStructure(options);
            }
            if (type == typeof(global::iText.Commons.Utils.JsonUtilTest.ComplexStructure))
            {
                return Create_ComplexStructure(options);
            }
            if (type == typeof(global::iText.Commons.Utils.JsonUtilTest.GrandsonComplexStructure))
            {
                return Create_GrandsonComplexStructure(options);
            }
            if (type == typeof(global::iText.Commons.Utils.JsonUtilTest.GrandsonComplexStructure[]))
            {
                return Create_GrandsonComplexStructureArray(options);
            }
            if (type == typeof(global::System.Collections.Generic.IDictionary<string, global::iText.Commons.Utils.JsonUtilTest.ChildInComplexStructure>))
            {
                return Create_IDictionaryStringChildInComplexStructure(options);
            }
            if (type == typeof(global::System.Collections.Generic.IDictionary<string, int?>))
            {
                return Create_IDictionaryStringNullableInt32(options);
            }
            if (type == typeof(int))
            {
                return Create_Int32(options);
            }
            if (type == typeof(int?))
            {
                return Create_NullableInt32(options);
            }
            if (type == typeof(string))
            {
                return Create_String(options);
            }
            if (type == typeof(string[]))
            {
                return Create_StringArray(options);
            }
            return null;
        }
    }
}
#endif